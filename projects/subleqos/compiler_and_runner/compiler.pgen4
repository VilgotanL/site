_ = {" " | "\t" | "\n" | comment} # whitespace
comment : "comment" = "//" {!"\n" \x00-\xFF} ["\n"] | multiline_comment
multiline_comment = "/*" { multiline_comment | !"*/" \x00-\xFF } "*/"

EMIT_ANY = !'"' !"'" !"\\" %\x20-\x7e | "\n" `\n` | `\` %\x00-\xFF
HEX = 0-9 | a-f | A-F
identifier : "identifier" = (a-z | A-Z | "_") {a-z | A-Z | 0-9 | "_"}
string : "string" = `"` (('"' {!'"' !"\n" char} '"') | ("'" {!"'" !"\n" char} "'")) `"`
char = escape | !"\\" EMIT_ANY
escape = "\\" escape_combos | "\\" ("x" | "X") `\x` %HEX %HEX # TODO add unicode & stuff later
escape_combos = "n" `\n` | "t" `\t` | "r" `\r` | '"' `\"` | "'" `\'` | "\\" `\\` # TODO add more combos later



main = PREPEND_CODE _ { function _ | statement _ }

function = !"" # TODO
statement
	= 









PREPEND_CODE = `


let nextLabelId = 0;
function mkLabel(debugName = "label") {
	let instr = { type: "label", debugName: debugName + "_" + nextLabelId, id: nextLabelId, parentBlock: null };
	nextLabelId++;
	return instr;
}
function mkLiteral(num) {
	return { type: "literal", value: num, parentBlock: null };
}


function Block(deoffsetConstants = true) {
	this.deoffsetConstants = deoffsetConstants;
	this.instrs = [];

	let self = this;
	this.add = function(instr) {
		instr.parentBlock = self;
		this.instrs.push(instr);
	};
}
function Scope() {
	this.userLabels = new Map(); // label by name
}

let b = new Block(false); // global block
let scopes = [new Scope()];
`